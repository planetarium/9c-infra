{{ range $idx := until (int $.Values.count) }}
{{ $index := add $idx 1 }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: remote-headless-{{ $index }}
    app.kubernetes.io/instance: {{ $.Release.Name }}
  name: remote-headless-{{ $index }}
  namespace: {{ $.Release.Name }}
spec:
  podManagementPolicy: OrderedReady
  {{- if $.Values.replicas }}
  replicas: {{ $.Values.replicas }}
  {{- else }}
  replicas: 1
  {{- end }}
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: remote-headless-{{ $index }}
  serviceName: remote-headless-{{ $index }}
  template:
    metadata:
      labels:
        app: remote-headless-{{ $index }}
      name: remote-headless-{{ $index }}
    spec:
      initContainers:
        {{- if $.Values.resetSnapshot }}
        - args:
          - 'https://snapshots.nine-chronicles.com/{{ $.Values.snapshot.path }}'  
          - /data/headless
          - $(RESET_SNAPSHOT_OPTION)
          - remote-headless-{{ $index }}
          - $(SLACK_WEBHOOK_URL)
          - $(SNAPSHOT_ROLLBACK_OPTION)
          command:
          - /bin/download_snapshot.sh
          env:
          - name: RESET_SNAPSHOT_OPTION  
            value: "{{ $.Values.resetSnapshot }}"
          - name: SNAPSHOT_ROLLBACK_OPTION
            value: "{{ $.Values.rollbackSnapshot }}"
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack-webhook-url
                name: slack
          {{- if and $.Values.image.repository $.Values.image.tag }}
          image: {{ $.Values.image.repository }}:{{ $.Values.image.tag }}
          {{- else }}
          image: {{ $.Values.image.repository }}:{{ $.Values.image.tag }}
          {{- end }}
          imagePullPolicy: Always
          name: reset-snapshot
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /bin/download_snapshot.sh
            name: download-snapshot-script
            readOnly: true
            subPath: download_snapshot.sh
          - mountPath: /data
            name: remote-headless-data-{{ $index }}
        {{- end }}
        - command:
            - sh
            - '-c'
            - >
              apk --no-cache add curl

              # Endpoint to check

              SEED="http://{{ index $.Values.seed.hosts 0 }}:{{ $.Values.seed.ports.graphql }}/playground.html"

              echo Checking: ${SEED}

              while [[ $(curl --silent --output /dev/null --request GET
              --write-out "%{http_code}" ${SEED}) -ne 200 ]]; do
                echo "Not ready"
                sleep 5s
              done

              VALIDATOR="http://validator-5.{{ $.Release.Name }}.svc.cluster.local/ui/playground"

              echo Checking: ${VALIDATOR}

              while [[ $(curl --silent --output /dev/null --request GET
              --write-out "%{http_code}" ${VALIDATOR}) -ne 200 ]]; do
                echo "Not ready"
                sleep 5s
              done

              echo Ready
          image: alpine
          imagePullPolicy: Always
          name: wait
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
      containers:
      - args:
        - NineChronicles.Headless.Executable.dll
        - run
        - --app-protocol-version={{ $.Values.appProtocolVersion }}
        - --trusted-app-protocol-version-signer={{ $.Values.trustedAppProtocolVersionSigner }}
        - --genesis-block-path={{ $.Values.genesisBlockPath }}
        - --port={{ $.Values.ports.headless }}
        - --no-miner
        - --store-type=rocksdb
        - --store-path=/data/headless
        {{- if $.Values.useTurnServer }}
        {{- range $.Values.iceServers }}
        - --ice-server={{ . }}
        {{- end }}
        {{- else }}
        - --host={{ index $.Values.hosts $idx }}
        {{- end }}
        {{- range $.Values.peerStrings }}
        - --peer={{ . }}
        {{- end }}
        - --graphql-server
        - --graphql-host=0.0.0.0
        - --graphql-port={{ $.Values.ports.graphql }}
        - --rpc-server
        - --rpc-remote-server
        - --rpc-listen-host=0.0.0.0
        - --rpc-listen-port={{ $.Values.ports.rpc }}
        - --no-cors
        - --chain-tip-stale-behavior-type=reboot
        - --tx-life-time=10
        - --planet={{ $.Values.planet }}
        {{- if $.Values.headlessAppsettingsPath }}
        - --config={{ $.Values.headlessAppsettingsPath }}
        {{- end }}
        {{- with $.Values.extraArgs }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
        command:
        - dotnet
        image: {{ $.Values.image.repository }}:{{ $.Values.image.tag }}
        imagePullPolicy: Always
        name: remote-headless-{{ $index }}
        ports:
        - containerPort: {{ $.Values.ports.graphql }}
          name: graphql
          protocol: TCP
        - containerPort: {{ $.Values.ports.headless }}
          name: headless
          protocol: TCP
        - containerPort: {{ $.Values.ports.rpc }}
          name: rpc
          protocol: TCP
        livenessProbe:
          exec:
            command:
            {{- if eq $.Values.networkType "Main"  }}
            - /bin/liveness_probe.sh
            {{- else }}
            - /bin/liveness_probe.sh
            {{- end }}
          failureThreshold: 3
          initialDelaySeconds: 1800
          periodSeconds: 30
          timeoutSeconds: 30
        readinessProbe:
          exec:
            command:
            - /bin/readiness_probe.sh
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 10
        resources:
          {{- toYaml $.Values.resources | nindent 10 }}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /data
          name: remote-headless-data-{{ $index }}
        - mountPath: /bin/liveness_probe.sh
          name: probe-script
          readOnly: true
          subPath: liveness_probe.sh
        - mountPath: /bin/readiness_probe.sh
          name: probe-script
          readOnly: true
          subPath: readiness_probe.sh
        {{- if $.Values.loggingEnabled }}
        - mountPath: /app/logs
          name: json-log
        {{- end }}
        - mountPath: /app/appsettings.configmap.json
          name: appsettings
          subPath: appsettings.json
        env:
          {{- if $.Values.loggingEnabled }}
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: NAMESPACE_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: JSON_LOG_PATH
            value: ./logs/$(POD_NAME)_$(NAMESPACE_NAME)_remote-headless-{{ $index }}.json
          {{- end }}
        {{- with $.Values.env }}
          {{- toYaml . | nindent 10 }}
        {{- end }}
      {{- with $.Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $.Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          defaultMode: 448
          name: {{ $.Release.Name }}-probe-script
        name: probe-script
      - name: download-snapshot-script
        configMap:
          defaultMode: 0700
          name: {{ $.Release.Name }}-download-snapshot-script
      {{- if $.Values.loggingEnabled }}
      - hostPath:
          path: /var/log/headless
          type: DirectoryOrCreate
        name: json-log
      {{- end }}
      - name: appsettings
        configMap:
          defaultMode: 0700
          name: appsettings
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      name: remote-headless-data-{{ $index }}
    spec:
      accessModes:
      - {{ default "ReadWriteOnce" $.Values.storage.accessModes }}
      resources:
        requests:
          storage: {{ $.Values.storage.data }}
      storageClassName: {{ $.Values.storage.class }}
      volumeMode: Filesystem
---
{{ end }}
