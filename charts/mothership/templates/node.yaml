{{ range $idx := until (int $.Values.node.count) }}
{{ $index := add $idx 1 }}
{{ $isSequencer := and $.Values.sequencer.enabled (eq ($index | toString) $.Values.sequencer.nodeIndex) }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: node-{{ $index }}
  namespace: {{ $.Release.Namespace }}
spec:
  selector:
    matchLabels:
      name: node-{{ $index }}
  replicas: 1
  template:
    metadata:
      labels:
        name: node-{{ $index }}
    spec:
      initContainers:
        - name: fetch-genesis
          image: curlimages/curl
          command: ["sh", "-c"]
          args:
            - |
              test -e genesis.json && test -e rollup.json && exit 0 ; \
              curl -L --remote-name-all $GENESIS_SOURCE/{genesis.json,rollup.json} ; \
              hexdump -vn32 -e'4/4 "%08x"' /dev/urandom > jwt.txt
          workingDir: /node
          env:
            - name: GENESIS_SOURCE
              value: "{{ $.Values.genesis.source }}"
          volumeMounts:
            - mountPath: /node
              name: node-volume
          securityContext:
            runAsUser: 0
            runAsNonRoot: false
        {{- if $.Values.genesis.createSnapshot }}
        - name: create-snapshot
          image: alpine
          command: ["sh", "-c"]
          args:
            - |
              apk add zstd aws-cli ; \
              TIME=`date -u +%Y%m%dT%H%M%SZ` ; \
              tar cvf - chaindata -C /data/geth | zstd - -f -o /data/snapshot-$TIME.tar.zst ; \
              aws s3 cp /data/snapshot-$TIME.tar.zst s3://$S3_SNAPSHOT_PATH/snapshot-$TIME.tar.zst --acl public-read
          env:
            - name: S3_SNAPSHOT_PATH
              value: "{{ $.Values.genesis.s3SnapshotPath }}"
          volumeMounts:
            - mountPath: /data
              name: op-geth-volume
          securityContext:
            runAsUser: 0
            runAsNonRoot: false
        {{- end }}
        {{- if $.Values.genesis.snapshot }}
        - name: fetch-snapshot
          image: curlimages/curl
          command: ["sh", "-c"]
          args:
            - |
              apk add zstd ; \
              curl -L -o /data/snapshot.tar.zst.tmp $SNAPSHOT ; \
              mv -f /data/snapshot.tar.zst.tmp /data/snapshot.tar.zst ; \
              mkdir -p /data/geth ; \
              rm -rf /data/geth/chaindata ; \
              zstd -d /data/snapshot.tar.zst --stdout | tar xvf - -C /data/geth
          env:
            - name: SNAPSHOT
              value: "{{ $.Values.genesis.snapshot }}"
          volumeMounts:
            - mountPath: /data
              name: op-geth-volume
          securityContext:
            runAsUser: 0
            runAsNonRoot: false
        {{- else }}
        - name: genesis-init
          image: {{ $.Values.node.opGeth.image }}
          args:
            - init
            - --datadir=/data
            - /node/genesis.json
          volumeMounts:
            - mountPath: /data
              name: op-geth-volume
            - mountPath: /node
              name: node-volume
              readOnly: true
        {{- end }}
        {{- if not $isSequencer }}
        - name: generate-static-peer
          image: curlimages/curl
          command: ["sh", "-c"]
          args:
            - |
              apk add jq ; \
              curl -X POST -H "Content-Type: application/json" --data \
              '{"jsonrpc":"2.0","method":"opp2p_self","params":[],"id":1}'  \
              {{ $.Values.sequencer.gethRpc }} | jq -r ".peerID" > /node/bootnode ;
          volumeMounts:
            - mountPath: /node
              name: op-node-volume
          securityContext:
            runAsUser: 0
            runAsNonRoot: false
        {{- end }}
      containers:
        - name: op-geth
          image: {{ $.Values.node.opGeth.image }}
          args:
            - --datadir=/data
            - --http
            - --http.port={{ $.Values.node.opGeth.port.rpc }}
            - --http.addr=0.0.0.0
            - --http.vhosts=*
            - --http.corsdomain=*
            - --http.api=web3,debug,eth,txpool,net,engine
            - --ws
            - --ws.port={{ $.Values.node.opGeth.port.wsrpc }}
            - --ws.addr=0.0.0.0
            - --ws.origins=*
            - --ws.api=web3,debug,eth,txpool,net,engine
            - --authrpc.port={{ $.Values.node.opGeth.port.authrpc }}
            - --authrpc.addr=0.0.0.0
            - --authrpc.vhosts=*
            - --authrpc.jwtsecret=/node/jwt.txt
            - --port={{ $.Values.node.opGeth.port.p2p.tcp }}
            - --discovery.port={{ $.Values.node.opGeth.port.p2p.udp }}
            {{- if not $isSequencer }}
            - --rollup.sequencerhttp={{ $.Values.sequencer.gethRpc }}
            {{- end }}
            - --rollup.disabletxpoolgossip=true
            - --syncmode=full
            - --gcmode=archive
          ports:
            - name: op-geth-rpc
              containerPort: {{ $.Values.node.opGeth.port.rpc }}
            - name: op-geth-wsrpc
              containerPort: {{ $.Values.node.opGeth.port.wsrpc }}
            - name: op-geth-authrpc
              containerPort: {{ $.Values.node.opGeth.port.authrpc }}
            - name: op-geth-p2p-tcp
              protocol: TCP
              containerPort: {{ $.Values.node.opGeth.port.p2p.tcp }}
            - name: op-geth-p2p-udp
              protocol: UDP
              containerPort: {{ $.Values.node.opGeth.port.p2p.udp }}
          volumeMounts:
            - mountPath: /data
              name: op-geth-volume
            - mountPath: /node
              name: node-volume
              readOnly: true
          livenessProbe:
            exec:
              command:
                - nc
                - -z
                - localhost
                - "{{ $.Values.node.opGeth.port.rpc }}"
            periodSeconds: 5
          {{- with $.Values.node.opGeth.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
        - name: op-node
          image: {{ $.Values.node.opNode.image }}
          command:
            - sh
            - -c
          args:
            - |
              op-node \
                --l1=$(L1_RPC) \
                --l1.beacon=$(L1_BEACON_RPC) \
                --l2=http://localhost:{{ $.Values.node.opGeth.port.authrpc }} \
                --l2.jwt-secret=/node/jwt.txt \
                --rollup.config=/node/rollup.json \
                --sequencer.enabled={{ $isSequencer }} \
                --p2p.sequencer.key=$(SEQUENCER_KEY) \
                --p2p.priv.path=/node/jwt.txt \
                --p2p.peerstore.path=/node/opnode_peerstore_db \
                --p2p.discovery.path=/node/opnode_discovery_db \
                {{- if not $isSequencer }}
                --p2p.bootnodes=$(cat /node/bootnode) \
                {{- end }}
                --p2p.listen.ip=0.0.0.0 \
                --p2p.listen.tcp={{ $.Values.node.opNode.port.p2p.tcp }} \
                --p2p.listen.udp={{ $.Values.node.opNode.port.p2p.udp }} \
                --p2p.nat={{ $.Values.node.loadBalancerExternal }} \
                {{- if $.Values.node.hosts }}
                --p2p.advertise.ip={{ index $.Values.node.hosts $idx }} \
                {{- end }}
                --rpc.addr=0.0.0.0 \
                --rpc.port={{ $.Values.node.opNode.port.rpc }} \
                --metrics.enabled \
                --metrics.port={{ $.Values.node.opNode.port.metrics }}
          env:
            - name: L1_RPC
              value: {{ $.Values.env.L1_RPC }}
            - name: L1_BEACON_RPC
              value: {{ $.Values.env.L1_BEACON_RPC }}
            - name: SEQUENCER_KEY
              valueFrom:
                secretKeyRef:
                  name: private-keys
                  key: SEQUENCER_KEY
          ports:
            - name: op-node-rpc
              containerPort: {{ $.Values.node.opNode.port.rpc }}
            - name: op-node-p2p-tcp
              protocol: TCP
              containerPort: {{ $.Values.node.opNode.port.p2p.tcp }}
            - name: op-node-p2p-udp
              protocol: UDP
              containerPort: {{ $.Values.node.opNode.port.p2p.udp }}
            - name: op-node-metrics
              containerPort: {{ $.Values.node.opNode.port.metrics }}
          volumeMounts:
            - mountPath: /node
              name: node-volume
          livenessProbe:
            exec:
              command:
                - nc
                - -z
                - localhost
                - "{{ $.Values.node.opNode.port.rpc }}"
            periodSeconds: 5
      volumes:
        - name: node-volume
          persistentVolumeClaim:
            claimName: node-volume
      {{- with $.Values.node.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  volumeClaimTemplates:
  - metadata:
      name: node-volume
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: {{ $.Values.genesis.volume.storage }}
      {{- if $.Values.storageClassName }}
      storageClassName: {{ $.Values.storageClassName }}
      {{- end }}
      volumeMode: Filesystem
  - metadata:
      name: op-geth-volume
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: {{ $.Values.node.opGeth.volume.storage }}
      {{- if $.Values.storageClassName }}
      storageClassName: {{ $.Values.storageClassName }}
      {{- end }}
      volumeMode: Filesystem

---

apiVersion: v1
kind: Service
metadata:
  name: node-{{ $index }}
  namespace: {{ $.Release.Namespace }}
  annotations:
    {{- if $.Values.node.loadBalancerExternal }}
    service.beta.kubernetes.io/aws-load-balancer-scheme: internet-facing
    service.beta.kubernetes.io/aws-load-balancer-type: external
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: {{ $.Values.awsLoadBalancerSslCert }}
    service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "443"
    {{- end }}
spec:
  selector:
    name: node-{{ $index }}
  {{- if $.Values.node.loadBalancerExternal }}
  type: LoadBalancer
  {{- end }}
  ports:
    - name: op-geth-rpc-port
      targetPort: op-geth-rpc
      port: {{ $.Values.node.opGeth.port.rpc }}
    - name: op-geth-rpc-http
      targetPort: op-geth-rpc
      port: 80
    - name: op-geth-rpc-https
      targetPort: op-geth-rpc
      port: 443
    - name: op-geth-wsrpc-port
      targetPort: op-geth-wsrpc
      port: {{ $.Values.node.opGeth.port.wsrpc }}
    - name: op-geth-p2p-port-tcp
      targetPort: op-geth-p2p-tcp
      protocol: TCP
      port: {{ $.Values.node.opGeth.port.p2p.tcp }}
    - name: op-geth-p2p-port-udp
      targetPort: op-geth-p2p-udp
      protocol: UDP
      port: {{ $.Values.node.opGeth.port.p2p.udp }}
    - name: op-node-rpc-port
      targetPort: op-node-rpc
      port: {{ $.Values.node.opNode.port.rpc }}
      targetPort: {{ $.Values.node.opNode.port.rpc }}
    - name: op-node-p2p-port-tcp
      targetPort: op-node-p2p-tcp
      protocol: TCP
      port: {{ $.Values.node.opNode.port.p2p.tcp }}
    - name: op-node-p2p-port-udp
      targetPort: op-node-p2p-udp
      protocol: UDP
      port: {{ $.Values.node.opNode.port.p2p.udp }}
    - name: op-node-metrics-port
      targetPort: op-node-metrics
      port: {{ $.Values.node.opNode.port.metrics }}

---

{{ end }}
