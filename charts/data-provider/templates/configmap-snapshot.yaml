apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Chart.Name }}-snapshot-script
  namespace: {{ $.Values.namespace }}
  labels:
    app.kubernetes.io/instance: {{ $.Chart.Name }}
data:
  download_snapshot.sh: |-
    #!/usr/bin/env bash

    cd /data

    until apt-get -y update
    do
      echo "Try again"
    done

    until apt-get -y install curl jq wget aria2 sudo zip
    do
      echo "Try again"
    done

    base_url=${1:-https://snapshots.nine-chronicles.com/internal}
    save_dir=${2:-"9c-main-snapshot_$(date +%Y%m%d_%H)"}
    download_option=$3
    service_name=$4
    SLACK_WEBHOOK=$5
    rollback_snapshot=${6:-"false"}
    complete_snapshot_reset=${7:-"false"}
    mainnet_snapshot_json_filename="mainnet_latest.json"

    if $download_option
    then
      echo "Start download snapshot"
      if [ $service_name != "snapshot" ]
      then
        curl -X POST -H 'Content-type: application/json' --data '{"text":"[K8S] Start snapshot download in '$service_name'. Please wait."}' $SLACK_WEBHOOK
      fi
      # strip tailing slash
      base_url=${base_url%/}

      function get_snapshot_value() {
          snapshot_json_url="$1"
          snapshot_param="$2"

          snapshot_param_return_value=$(curl --silent "$snapshot_json_url" | jq ".$snapshot_param")
          echo "$snapshot_param_return_value"
      }

      function download_unzip_partial_snapshot() {
        snapshot_json_filename="latest.json"
        snapshot_zip_filename="state_latest.zip"
        snapshot_zip_filename_array=("$snapshot_zip_filename")
        mainnet_snapshot_json_url="$base_url/$mainnet_snapshot_json_filename"
        mainnet_snapshot_blockIndex=$(get_snapshot_value "$mainnet_snapshot_json_url" "Index")
        mainnet_snapshot_blockEpoch=$(get_snapshot_value "$mainnet_snapshot_json_url" "BlockEpoch")

        if [ "$mainnet_snapshot_blockEpoch" -le $1 ]; then
            if [ $rollback_snapshot = "false" ]; then
              if [ "$mainnet_snapshot_blockIndex" -le $2 ]; then
                  echo "Skip snapshot download because the local chain tip is greater than the snapshot tip."
                  return
              fi
            fi
        fi

        while :
        do
            snapshot_json_url="$base_url/$snapshot_json_filename"
            BlockEpoch=$(get_snapshot_value "$snapshot_json_url" "BlockEpoch")
            TxEpoch=$(get_snapshot_value "$snapshot_json_url" "TxEpoch")
            PreviousBlockEpoch=$(get_snapshot_value "$snapshot_json_url" "PreviousBlockEpoch")
            PreviousTxEpoch=$(get_snapshot_value "$snapshot_json_url" "PreviousTxEpoch")

            snapshot_zip_filename="snapshot-$BlockEpoch-$TxEpoch.zip"
            snapshot_zip_filename_array+=("$snapshot_zip_filename")
            rm -r $save_dir/block/epoch$BlockEpoch/*
            rm -r $save_dir/tx/epoch$BlockEpoch/*

            if [ $(("$PreviousBlockEpoch"+2)) -lt $1 ]
            then
                break
            fi

            snapshot_json_filename="snapshot-$PreviousBlockEpoch-$PreviousTxEpoch.json"
        done

        if [[ ! -d "$save_dir" ]]
        then
            echo "[Info] The directory $save_dir does not exist and is created."
            mkdir -p "$save_dir"
        fi

        rm -r $save_dir/block/blockindex/*
        rm -r $save_dir/tx/txindex/*
        rm -r $save_dir/txbindex/*
        rm -r $save_dir/blockcommit/*
        rm -r $save_dir/txexec/*
        rm -r $save_dir/states/*

        for ((i=${#snapshot_zip_filename_array[@]}-1; i>=0; i--))
        do
            snapshot_zip_filename="${snapshot_zip_filename_array[$i]}"
            rm "$snapshot_zip_filename" 2>/dev/null

            snapshot_zip_url="$base_url/$snapshot_zip_filename"
            echo "$snapshot_zip_url"

            aria2c "$snapshot_zip_url" -j10 -x10 --continue=true
            echo "Unzipping $snapshot_zip_filename"
            unzip -o "$snapshot_zip_filename" -d "$save_dir"
            rm "$snapshot_zip_filename"
        done

        if [ -f $save_dir/$mainnet_snapshot_json_filename ]; then
            rm $save_dir/$mainnet_snapshot_json_filename
        fi

        aria2c "$base_url/$mainnet_snapshot_json_filename" -d "$save_dir" -o "$mainnet_snapshot_json_filename" -j10 -x10 --continue=true
      }

      function download_unzip_full_snapshot() {
          snapshot_json_filename="latest.json"
          snapshot_zip_filename="state_latest.zip"
          snapshot_zip_filename_array=("$snapshot_zip_filename")

          while :
          do
              snapshot_json_url="$base_url/$snapshot_json_filename"
              echo "$snapshot_json_url"

              BlockEpoch=$(get_snapshot_value "$snapshot_json_url" "BlockEpoch")
              TxEpoch=$(get_snapshot_value "$snapshot_json_url" "TxEpoch")
              PreviousBlockEpoch=$(get_snapshot_value "$snapshot_json_url" "PreviousBlockEpoch")
              PreviousTxEpoch=$(get_snapshot_value "$snapshot_json_url" "PreviousTxEpoch")

              snapshot_zip_filename="snapshot-$BlockEpoch-$TxEpoch.zip"
              snapshot_zip_filename_array+=("$snapshot_zip_filename")

              if [ "$PreviousBlockEpoch" -eq 0 ]
              then
                  break
              fi

              snapshot_json_filename="snapshot-$PreviousBlockEpoch-$PreviousTxEpoch.json"
          done

          if [[ ! -d "$save_dir" ]]
          then
              echo "[Info] The directory $save_dir does not exist and is created."
              mkdir -p "$save_dir"
          fi

          for ((i=${#snapshot_zip_filename_array[@]}-1; i>=0; i--))
          do
              snapshot_zip_filename="${snapshot_zip_filename_array[$i]}"
              rm "$snapshot_zip_filename" 2>/dev/null

              snapshot_zip_url="$base_url/$snapshot_zip_filename"
              echo "$snapshot_zip_url"

              aria2c "$snapshot_zip_url" -j10 -x10 --continue=true
              echo "Unzipping $snapshot_zip_filename"
              unzip -o "$snapshot_zip_filename" -d "$save_dir"
              rm "$snapshot_zip_filename"
          done

          rm $save_dir/mainnet_latest.json
          aria2c "$base_url/$mainnet_snapshot_json_filename" -d "$save_dir" -o "$mainnet_snapshot_json_filename" -j10 -x10 --continue=true
      }

      if [ -f $save_dir/$mainnet_snapshot_json_filename ]
      then
        if [ $complete_snapshot_reset = "true" ]
        then
          echo "Completely delete the existing store and download a new snapshot"
          rm -r "$save_dir"
          mkdir -p "$save_dir"
          download_unzip_full_snapshot
        else
          local_chain_tip_index="$((/app/NineChronicles.Headless.Executable chain tip "RocksDb" "$save_dir") | jq -r '.Index')"
          if [ -f $save_dir/$mainnet_snapshot_json_filename ]
          then
            local_previous_mainnet_blockEpoch=$(cat "$save_dir/$mainnet_snapshot_json_filename" | jq ".BlockEpoch")
            download_unzip_partial_snapshot $local_previous_mainnet_blockEpoch $local_chain_tip_index
          else
            local_chain_tip_timestamp="$((/app/NineChronicles.Headless.Executable chain tip "RocksDb" "$save_dir") | jq -r '.Timestamp')"
            epoch_seconds=$(date -d "$local_chain_tip_timestamp" +%s)
            echo $epoch_seconds
            local_chain_tip_blockEpoch=$(($epoch_seconds / 86400))
            echo $local_chain_tip_blockEpoch
            download_unzip_partial_snapshot $local_chain_tip_blockEpoch $local_chain_tip_index
          fi
        fi
      else
        download_unzip_full_snapshot
      fi

      # The return value for the program that calls this script
      echo "$save_dir"
      if [ $service_name != "snapshot" ]
      then
        curl -X POST -H 'Content-type: application/json' --data '{"text":"[K8S] Snapshot download complete in '$service_name'. Pod Starting."}' $SLACK_WEBHOOK
      fi
    else
      echo "Skip download snapshot"
      if [ $service_name != "snapshot" ]
      then
        curl -X POST -H 'Content-type: application/json' --data '{"text":"[K8S] Skip snapshot download in '$service_name'. Pod Starting."}' $SLACK_WEBHOOK
      fi
    fi
  preload_headless.sh: |-
    #!/usr/bin/env bash
    set -ex

    apt-get -y update
    apt-get -y install zip
    apt-get -y install curl
    HOME="/app"

    APP_PROTOCOL_VERSION=$1
    SLACK_WEBHOOK=$2
    VERSION_NUMBER="${APP_PROTOCOL_VERSION:0:4}"
    GENESIS_BLOCK_PATH="https://release.nine-chronicles.com/genesis-block-9c-main"
    STORE_PATH="/data/headless"
    TRUSTED_APP_PROTOCOL_VERSION_SIGNER="02529a61b9002ba8f21c858224234af971e962cac9bd7e6b365e71e125c6463478"
    SEED1="033369e95dbfd970dd9a7b4df31dcf5004d7cfd63289d26cc42bbdd01e25675b6f,tcp-seed-1,31234"
    ICE_SERVER="turn://0ed3e48007413e7c2e638f13ddd75ad272c6c507e081bd76a75e4b7adc86c9af:0apejou+ycZFfwtREeXFKdfLj2gCclKzz5ZJ49Cmy6I=@turn-us.planetarium.dev:3478"

    HEADLESS="$HOME/NineChronicles.Headless.Executable"
    HEADLESS_LOG_NAME="headless_$(date -u +"%Y%m%d%H%M").log"
    HEADLESS_LOG_DIR="/data/snapshot_logs"
    HEADLESS_LOG="$HEADLESS_LOG_DIR/$HEADLESS_LOG_NAME"
    mkdir -p "$HEADLESS_LOG_DIR"

    PID_FILE="$HOME/headless_pid"
    function senderr() {
      echo "$1"
      curl -X POST -H 'Content-type: application/json' --data '{"text":"[K8S] '$1'. Check snapshot-v'$VERSION_NUMBER' in 9c-internal cluster at preload_headless.sh."}' $SLACK_WEBHOOK
    }

    function preload_complete() {
      echo "$1"
    }

    function waitpid() {
      PID="$1"
      while [ -e "/proc/$PID" ]; do
        sleep 1
      done
    }

    function run_headless() {
      chmod 777 -R "$STORE_PATH"

      "$HEADLESS" \
          --no-miner \
          --genesis-block-path="$GENESIS_BLOCK_PATH" \
          --store-type=rocksdb \
          --store-path="$STORE_PATH" \
          --app-protocol-version="$APP_PROTOCOL_VERSION" \
          --trusted-app-protocol-version-signer="$TRUSTED_APP_PROTOCOL_VERSION_SIGNER" \
          --ice-server="$ICE_SERVER" \
          --peer="$SEED1" \
          --network-type=Default \
          > "$HEADLESS_LOG" 2>&1 &

      PID="$!"

      echo "$PID" | tee "$PID_FILE"

      if ! kill -0 "$PID"; then
        senderr "$PID doesn't exist. Failed to run headless" $1
        exit 1
      fi
    }

    function wait_preloading() {
      touch "$PID_FILE"
      PID="$(cat "$PID_FILE")"

      if ! kill -0 "$PID"; then
        senderr "$PID doesn't exist. Failed to run headless" $1
        exit 1
      fi

      if timeout 144000 tail -f "$HEADLESS_LOG" | grep -m1 "preloading is no longer needed"; then
        sleep 60
      else
        senderr "grep failed. Failed to preload." $1
        kill "$PID"
        exit 1
      fi
    }

    function kill_headless() {
      touch "$PID_FILE"
      PID="$(cat "$PID_FILE")"
      if ! kill -0 "$PID"; then
        echo "$PID doesn't exist. Failed to kill headless"
      else
        kill "$PID"; sleep 60; kill -9 "$PID" || true
        waitpid "$PID" || true
        chmod 777 -R "$STORE_PATH"
      fi
    }

    function rotate_log() {
      cd "$HEADLESS_LOG_DIR"
      if ./*"$(date -d 'yesterday' -u +'%Y%m%d')"*.log; then
        zip "$(date -d 'yesterday' -u +'%Y%m%d')".zip ./*"$(date -d 'yesterday' -u +'%Y%m%d')"*.log
        rm ./*"$(date -d 'yesterday' -u +'%Y%m%d')"*.log
      fi
    }
    trap '' HUP

    run_headless
    wait_preloading
    preload_complete "Preloading completed"
    kill_headless
    rotate_log
  upload_snapshot.sh: |-
    #!/usr/bin/env bash
    set -ex

    apt-get -y update
    apt-get -y install curl
    apt-get -y install zip
    apt-get -y install unzip
    apt-get -y install sudo

    uname=$(uname -r)
    arch=${uname##*.}
    if [ "$arch" = "aarch64" ]; then
      curl "https://awscli.amazonaws.com/awscli-exe-linux-aarch64.zip" -o "awscliv2.zip"
    else
      curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
    fi
    unzip awscliv2.zip
    sudo ./aws/install

    HOME="/app"
    STORE_PATH="/data/headless"
    SLACK_WEBHOOK=$2
    CF_DISTRIBUTION_ID=$3

    function senderr() {
      echo "$1"
      curl -X POST -H 'Content-type: application/json' --data '{"text":"[K8S] '$1'. Check snapshot in 9c-internal cluster at upload_snapshot.sh."}' $2
    }

    function make_and_upload_snapshot() {
      SNAPSHOT="$HOME/NineChronicles.Snapshot"
      OUTPUT_DIR="/data/snapshots"
      PARTITION_DIR="/data/snapshots/partition"
      STATE_DIR="/data/snapshots/state"
      METADATA_DIR="/data/snapshots/metadata"
      FULL_DIR="/data/snapshots/full"
      URL="https://snapshots.nine-chronicles.com/internal/latest.json"

      mkdir -p "$OUTPUT_DIR" "$PARTITION_DIR" "$STATE_DIR" "$METADATA_DIR"
      if curl --output /dev/null --silent --head --fail "$URL"; then
        curl "$URL" -o "$METADATA_DIR/latest.json"
      else
        echo "URL does not exist: $URL"
      fi

      if ! "$SNAPSHOT" --output-directory "$OUTPUT_DIR" --store-path "$STORE_PATH"  --block-before 0 --apv "$1" --snapshot-type "partition"; then
        senderr "Snapshot creation failed." $2
        exit 1
      fi

      # shellcheck disable=SC2012
      LATEST_SNAPSHOT=$(ls -t $PARTITION_DIR/*.zip | head -1)
      # shellcheck disable=SC2012
      LATEST_METADATA=$(ls -t $METADATA_DIR/*.json | head -1)
      LATEST_SNAPSHOT_FILENAME=$(basename "$LATEST_SNAPSHOT")
      LATEST_METADATA_FILENAME=$(basename "$LATEST_METADATA")
      UPLOAD_FILENAME="latest"
      UPLOAD_SNAPSHOT_FILENAME="$UPLOAD_FILENAME.zip"
      UPLOAD_METADATA_FILENAME="$UPLOAD_FILENAME.json"
      SNAPSHOT_FILENAME=$(echo $LATEST_SNAPSHOT_FILENAME | cut -d'.' -f 1)
      # shellcheck disable=SC2012
      LATEST_STATE=$(ls -t $STATE_DIR/*.zip | head -1)
      LATEST_STATE_FILENAME=$(basename "$LATEST_STATE")
      STATE_FILENAME=$(echo $LATEST_STATE_FILENAME | cut -d'.' -f 1)

      S3_BUCKET_NAME="9c-snapshots-v2"
      S3_LATEST_SNAPSHOT_PATH="internal/$UPLOAD_SNAPSHOT_FILENAME"
      S3_LATEST_METADATA_PATH="internal/$UPLOAD_METADATA_FILENAME"

      AWS="/usr/local/bin/aws"
      AWS_ACCESS_KEY_ID="$(cat "/secret/aws_access_key_id")"
      AWS_SECRET_ACCESS_KEY="$(cat "/secret/aws_secret_access_key")"
      "$AWS" configure set aws_access_key_id $AWS_ACCESS_KEY_ID
      "$AWS" configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
      "$AWS" configure set default.region us-east-2
      "$AWS" configure set default.output json

      "$AWS" s3 cp "$LATEST_SNAPSHOT" "s3://$S3_BUCKET_NAME/internal/$LATEST_SNAPSHOT_FILENAME" --quiet --acl public-read
      "$AWS" s3 cp "$LATEST_METADATA" "s3://$S3_BUCKET_NAME/internal/$LATEST_METADATA_FILENAME" --quiet --acl public-read
      "$AWS" s3 cp "$LATEST_STATE" "s3://$S3_BUCKET_NAME/internal/$LATEST_STATE_FILENAME" --quiet --acl public-read
      "$AWS" s3 cp "s3://$S3_BUCKET_NAME/internal/$LATEST_SNAPSHOT_FILENAME" "s3://$S3_BUCKET_NAME/$S3_LATEST_SNAPSHOT_PATH" --quiet --acl public-read
      "$AWS" s3 cp "s3://$S3_BUCKET_NAME/internal/$LATEST_METADATA_FILENAME" "s3://$S3_BUCKET_NAME/$S3_LATEST_METADATA_PATH" --quiet --acl public-read

      "$AWS" cloudfront create-invalidation --distribution-id "$CF_DISTRIBUTION_ID" --paths "/internal/$SNAPSHOT_FILENAME.*"
      "$AWS" cloudfront create-invalidation --distribution-id "$CF_DISTRIBUTION_ID" --paths "/internal/$UPLOAD_FILENAME.*"
      "$AWS" cloudfront create-invalidation --distribution-id "$CF_DISTRIBUTION_ID" --paths "/internal/$STATE_FILENAME.*"

      rm "$LATEST_SNAPSHOT"
      rm "$LATEST_STATE"
      rm -r "$METADATA_DIR"
    }

    trap '' HUP

    make_and_upload_snapshot $1 $2 $4

