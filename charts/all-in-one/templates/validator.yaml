{{ range $idx := until (int .Values.validator.count) }}
{{ $index := add $idx 5 }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: validator-{{ $index }}
    app.kubernetes.io/instance: {{ $.Release.Name }}
  name: validator-{{ $index }}
  namespace: {{ $.Release.Name }}
spec:
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: validator-{{ $index }}
  serviceName: validator-{{ $index }}
  template:
    metadata:
      labels:
        app: validator-{{ $index }}
      name: validator-{{ $index }}
      annotations:
        prometheus.io/port: '80'
        prometheus.io/scrape: 'true'
        {{- if $.Values.validator.datadog.enabled }}
        ad.datadoghq.com/validator-{{ $index }}.logs: |-
          [
            {
            "source": "container",
            "service": "validator-{{ $index }}",
            "log_processing_rules": [
              {
                "type": "include_at_match",
                "name": "BlockEvaluationDuration",
                "pattern" : "pre-evaluation hash"
              },
              {
                "type": "exclude_at_match",
                "name": "excludeException",
                "pattern" : "Exception"
              },
              {
                "type": "exclude_at_match",
                "name": "excludeExceptionUndercase",
                "pattern" : "exception"
              },
              {
                "type": "exclude_at_match",
                "name": "excludeEvaluating",
                "pattern" : "Evaluating"
              }
            ]
          }]
        {{- end }}
    spec:
      initContainers:
      {{- if $.Values.global.resetSnapshot }}
      - args:
        - 'https://snapshots.nine-chronicles.com/{{ $.Values.snapshot.path }}'  
        - {{ $.Values.validator.storePath | default "/data/validator" }}
        - $(RESET_SNAPSHOT_OPTION)
        - validator-{{ $index }}
        - $(SLACK_WEBHOOK_URL)
        - $(SNAPSHOT_ROLLBACK_OPTION)
        command:
        - /bin/download_snapshot.sh
        env:
        - name: RESET_SNAPSHOT_OPTION  
          value: "{{ $.Values.global.resetSnapshot }}"
        - name: SNAPSHOT_ROLLBACK_OPTION
          value: "{{ $.Values.global.rollbackSnapshot }}"
        - name: SLACK_WEBHOOK_URL
          valueFrom:
            secretKeyRef:
              key: slack-webhook-url
              name: slack
        {{- if and $.Values.validator.image.repository $.Values.validator.image.tag }}
        image: {{ $.Values.validator.image.repository }}:{{ $.Values.validator.image.tag }}
        {{- else }}
        image: {{ $.Values.global.image.repository }}:{{ $.Values.global.image.tag }}
        {{- end }}
        imagePullPolicy: Always
        name: reset-snapshot
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /bin/download_snapshot.sh
          name: download-snapshot-script
          readOnly: true
          subPath: download_snapshot.sh
        - mountPath: /data
          name: validator-data-{{ $index }}
      {{- end }}
      {{- if $.Values.validator.datadog.enabled }}
      - command:
          - sh
          - '-c'
          - >
            apk --no-cache add curl tar

            mkdir /data/datadog

            curl -s -L
            https://github.com/DataDog/dd-trace-dotnet/releases/download/v2.57.0/datadog-dotnet-apm-2.57.0.arm64.tar.gz
            | tar xvz -C /data/datadog

            sh /data/datadog/createLogPath.sh
        image: alpine
        imagePullPolicy: Always
        name: setup-datadog
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /data
          name: validator-data-{{ $index }}
      {{- end }}
      - command:
        - sh
        - '-c'
        - >
          apk --no-cache add curl

          # Endpoint to check

          SEED="http://{{ regexFind "^[^,]+" (toString (index $.Values.seed.hosts 0)) }}:{{ $.Values.seed.ports.graphql }}/playground.html"

          echo Checking: ${SEED}

          while [[ $(curl --silent --output /dev/null --request GET
          --write-out "%{http_code}" ${SEED}) -ne 200 ]]; do
            echo "Not ready"
            sleep 5s
          done

          echo Ready
        image: alpine
        imagePullPolicy: Always
        name: wait
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      containers:
      - args:
        - NineChronicles.Headless.Executable.dll
        - run
        - --app-protocol-version={{ $.Values.global.appProtocolVersion }}
        - --trusted-app-protocol-version-signer={{ $.Values.global.trustedAppProtocolVersionSigner }}
        - --genesis-block-path={{ $.Values.global.genesisBlockPath }}
        {{- if eq $.Values.global.consensusType "pbft" }}
        - --host={{ regexFind "^[^,]+" (toString (index $.Values.validator.hosts $idx)) }}
        {{- else }}
        {{- range $.Values.global.iceServers }}
        - --ice-server={{ . }}
        {{- end }}
        {{- end }}
        - --port={{ $.Values.validator.ports.headless }}
        - --store-path={{ $.Values.validator.storePath | default "/data/validator" }}
        - --store-type=rocksdb
        {{- range $.Values.global.peerStrings }}
        - --peer={{ . }}
        {{- end }}
        - --graphql-server
        - --graphql-host=0.0.0.0
        - --graphql-port={{ $.Values.validator.ports.graphql }}
        {{- if eq $.Values.global.consensusType "pbft" }}
        - --swarm-private-key
        - $(PRIVATE_KEY)
        - --miner-private-key
        - $(PRIVATE_KEY)
        - --consensus-private-key
        - $(PRIVATE_KEY)
        - --consensus-port={{ $.Values.validator.ports.gossip }}
        {{- range $.Values.validator.consensusSeedStrings }}
        - --consensus-seed={{ . }}
        {{- end }}
        {{- end }}
        {{- with $.Values.validator.extraArgs }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
        - --planet={{ $.Values.global.planet }}
        {{- if $.Values.global.headlessAppsettingsPath }}
        - --config={{ $.Values.global.headlessAppsettingsPath }}
        {{- end }}
        command:
          - dotnet
        env:
          - name: PRIVATE_KEY
            valueFrom:
              secretKeyRef:
                key: validator-private-key-{{ $index }}
                name: private-keys
          {{- if $.Values.validator.loggingEnabled }}
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: NAMESPACE_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: JSON_LOG_PATH
            value: ./logs/$(POD_NAME)_$(NAMESPACE_NAME)_validator-{{ $index }}.json
          {{- end }}
          {{- if $.Values.validator.datadog.enabled }}
          - name: OTLP_ENDPOINT
            value: 'http://datadog.datadog.svc.cluster.local:4317'
          - name: DD_ENV
            value: production
          - name: ASPNETCORE_ENVIRONMENT
            value: 'production'
          - name: DD_DOTNET_TRACER_HOME
            value: /data/datadog
          - name: DD_AGENT_HOST
            value: datadog.datadog.svc.cluster.local
          - name: DD_RUNTIME_METRICS_ENABLED
            value: 'true'
          - name: DD_DYNAMIC_INSTRUMENTATION_ENABLED
            value: 'true'
          - name: CORECLR_ENABLE_PROFILING
            value: '1'
          - name: CORECLR_PROFILER
            value: '{846F5F1C-F9AE-4B07-969E-05C26BC060D8}'
          - name: CORECLR_PROFILER_PATH
            value: /data/datadog/Datadog.Trace.ClrProfiler.Native.so
          {{- end }}
          {{- with $.Values.validator.env }}
            {{- toYaml . | nindent 10 }}
          {{- end }}
        image: {{ $.Values.validator.image.repository | default $.Values.global.image.repository }}:{{ $.Values.validator.image.tag | default $.Values.global.image.tag }}
        imagePullPolicy: Always
        name: validator-{{ $index }}
        ports:
        - containerPort: {{ $.Values.validator.ports.headless }}
          name: headless
          protocol: TCP
        - containerPort: {{ $.Values.validator.ports.graphql }}
          name: graphql
          protocol: TCP
        - containerPort: {{ $.Values.validator.ports.gossip }}
          name: gossip
          protocol: TCP
        {{- if $.Values.validator.ports.rpc }}
        - containerPort: {{ $.Values.validator.ports.rpc }}
          name: rpc
          protocol: TCP
        {{- end }}
        {{- if eq $.Values.global.networkType "Main"  }}
        livenessProbe:
          exec:
            command:
            - /bin/liveness_probe_validator.sh
          failureThreshold: 3
          initialDelaySeconds: 1800
          periodSeconds: 30
          timeoutSeconds: 30
        {{- end }}
        resources:
          {{- toYaml $.Values.validator.resources | nindent 10 }}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /data
          name: validator-data-{{ $index }}
        - mountPath: /bin/liveness_probe_validator.sh
          name: probe-script
          readOnly: true
          subPath: liveness_probe_validator.sh
        - mountPath: /bin/readiness_probe.sh
          name: probe-script
          readOnly: true
          subPath: readiness_probe.sh
        {{- if $.Values.validator.loggingEnabled }}
        - mountPath: /app/logs
          name: json-log
        {{- end }}
        - mountPath: /app/appsettings.configmap.json
          name: appsettings
          subPath: appsettings.json
      {{- with $.Values.validator.nodeSelector }}
      nodeSelector:
      {{- if kindIs "slice" . }}
        {{- toYaml (index . $idx) | nindent 8 }}
      {{- else }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- end }}
      {{- with $.Values.validator.tolerations }}
      tolerations:
        {{- toYaml $.Values.validator.tolerations | nindent 8 }}
      {{- end }}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          defaultMode: 448
          name: {{ $.Release.Name }}-probe-script
        name: probe-script
      - name: download-snapshot-script
        configMap:
          defaultMode: 0700
          name: {{ $.Release.Name }}-download-snapshot-script
      {{- if $.Values.validator.loggingEnabled }}
      - hostPath:
          path: /var/log/headless
          type: DirectoryOrCreate
        name: json-log
      {{- end }}
      - name: appsettings
        configMap:
          defaultMode: 0700
          name: appsettings
      {{- if and $.Values.validator.storage.volumeNames (gt (len $.Values.validator.storage.volumeNames) $idx) (ne (index $.Values.validator.storage.volumeNames $idx) "") }}
      - name: validator-data-{{ $index }}
        persistentVolumeClaim:
          claimName: {{ index $.Values.validator.storage.volumeNames $idx }}
      {{- else }}
  volumeClaimTemplates:
  - metadata:
      name: validator-data-{{ $index }}
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: {{ $.Values.validator.storage.data }}
      {{- if eq $.Values.provider "AWS" }}
      storageClassName: {{ $.Release.Name }}-gp3
      {{- else if eq $.Values.provider "RKE2" }}
      storageClassName: {{ $.Release.Name }}-longhorn
      {{- end }}
      volumeMode: Filesystem
      {{- end }}
  updateStrategy:
    type: RollingUpdate
---
{{- if $.Values.validator.ingress.enabled }}
{{- $hosts := split "," (index ($.Values.validator.ingress.hosts | default $.Values.validator.hosts) $idx) }}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: validator-{{ $index }}-ingress
  namespace: {{ $.Release.Name }}
  annotations:
    traefik.ingress.kubernetes.io/affinity: "true"
spec:
  rules:
    {{- range $host := $hosts }}
    - host: {{ $host }}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: validator-{{ $index }}
                port:
                  number: 80
    {{- end }}
---
{{- end }}
{{ end }}
