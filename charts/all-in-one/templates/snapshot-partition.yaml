{{ if $.Values.snapshot.partition.enabled }}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: snapshot-partition
  namespace: {{ $.Release.Name }}
spec:
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        spec:
          initContainers:
          {{- if $.Values.snapshot.downloadSnapshot }}
          - args:
            - 'https://snapshots.nine-chronicles.com/{{ $.Values.snapshot.path }}'
            - /data/headless
            - $(RESET_SNAPSHOT_OPTION)
            - snapshot
            - $(SLACK_WEBHOOK_URL)
            command:
            - /bin/download_snapshot.sh
            env:
            - name: RESET_SNAPSHOT_OPTION
              value: 'true'
            - name: SLACK_WEBHOOK_URL
              valueFrom:
                secretKeyRef:
                  key: slack-webhook-url
                  name: slack
            {{- if and $.Values.remoteHeadless.image.repository $.Values.remoteHeadless.image.tag }}
            image: {{ $.Values.remoteHeadless.image.repository }}:{{ $.Values.remoteHeadless.image.tag }}
            {{- else }}
            image: {{ $.Values.global.image.repository }}:{{ $.Values.global.image.tag }}
            {{- end }}
            imagePullPolicy: Always
            name: reset-snapshot
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /bin/download_snapshot.sh
              name: download-snapshot-script
              readOnly: true
              subPath: download_snapshot.sh
            - mountPath: /data
              name: snapshot-volume-partition
          {{- end }}
          - name: preload-headless
            {{- if and $.Values.remoteHeadless.image.repository $.Values.remoteHeadless.image.tag }}
            image: {{ $.Values.remoteHeadless.image.repository }}:{{ $.Values.remoteHeadless.image.tag }}
            {{- else }}
            image: {{ $.Values.global.image.repository }}:{{ $.Values.global.image.tag }}
            {{- end }}
            args:
            - $(APP_PROTOCOL_VERSION_KEY)
            - $(SLACK_WEBHOOK_URL)
            command:
            - /bin/preload_headless.sh
            env:
            - name: APP_PROTOCOL_VERSION_KEY
              value: {{ $.Values.global.appProtocolVersion }}
            - name: SLACK_WEBHOOK_URL
              valueFrom:
                secretKeyRef:
                  name: slack
                  key: slack-webhook-url
            {{- with $.Values.snapshot.resources }}
            resources:
              {{- toYaml . | nindent 14 }}
            {{- end }}
            volumeMounts:
            - name: script-volume
              mountPath: /bin/preload_headless.sh
              readOnly: true
              subPath: preload_headless.sh
            - name: snapshot-volume-partition
              mountPath: /data
          containers:
          - name: upload-snapshot
            image: {{ $.Values.snapshot.image }}
            args:
            - $(APP_PROTOCOL_VERSION_KEY)
            - $(SLACK_WEBHOOK_URL)
            - $(CF_DISTRIBUTION_ID)
            - $(SLACK_TOKEN)
            command:
            - /bin/upload_snapshot.sh
            env:
            - name: APP_PROTOCOL_VERSION_KEY
              value: {{ $.Values.global.appProtocolVersion }}
            - name: SLACK_WEBHOOK_URL
              valueFrom:
                secretKeyRef:
                  name: slack
                  key: slack-webhook-url
            - name: CF_DISTRIBUTION_ID
              valueFrom:
                secretKeyRef:
                  name: aws-keys
                  key: cf_distribution_id
            - name: SLACK_TOKEN
              valueFrom:
                secretKeyRef:
                  name: slack
                  key: slack-token
            {{- with $.Values.snapshot.resources }}
            resources:
              {{- toYaml . | nindent 14 }}
            {{- end }}
            volumeMounts:
            - name: script-volume
              mountPath: /bin/upload_snapshot.sh
              readOnly: true
              subPath: upload_snapshot.sh
            - name: download-snapshot-script
              mountPath: /bin/download_snapshot.sh
              readOnly: true
              subPath: download_snapshot.sh
            - name: snapshot-volume-partition
              mountPath: /data
            - name: aws-keys
              mountPath: /secret
              readOnly: true
          restartPolicy: OnFailure
          {{- with $.Values.snapshot.nodeSelector }}
          nodeSelector:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          volumes:
          - name: script-volume
            configMap:
              defaultMode: 0700
              name: {{ .Release.Name }}-snapshot-script-partition
          - name: download-snapshot-script
            configMap:
              defaultMode: 0700
              name: {{ $.Release.Name }}-download-snapshot-script
          - name: snapshot-volume-partition
            persistentVolumeClaim:
              claimName: snapshot-volume-partition
          - name: aws-keys
            secret:
              secretName: aws-keys
  schedule: 0 */12 * * *
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  suspend: {{ $.Values.snapshot.partition.suspend }}
{{ end }}
