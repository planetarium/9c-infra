{{ if $.Values.dataProviderDataMigrator.enabled }}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: dp-user-migrator
  namespace: {{ $.Release.Name }}
spec:
  concurrencyPolicy: Allow
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      backoffLimit: 2
      template:
        spec:
          containers:
          - args:
            - $(APP_PROTOCOL_VERSION_KEY)
            - $(SLACK_WEBHOOK_URL)
            command:
            - /bin/preload_headless.sh
            env:
            - name: APP_PROTOCOL_VERSION_KEY
              value: {{ $.Values.global.appProtocolVersion }}
            - name: SLACK_WEBHOOK_URL
              valueFrom:
                secretKeyRef:
                  key: slack-webhook-url
                  name: slack
            {{- if and $.Values.remoteHeadless.image.repository $.Values.remoteHeadless.image.tag }}
            image: {{ $.Values.remoteHeadless.image.repository }}:{{ $.Values.remoteHeadless.image.tag }}
            {{- else }}
            image: {{ $.Values.global.image.repository }}:{{ $.Values.global.image.tag }}
            {{- end }}
            imagePullPolicy: Always
            name: preload-headless
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            {{- with $.Values.dataProviderDataMigrator.resources }}
            resources:
              {{- toYaml . | nindent 14 }}
            {{- end }}
            volumeMounts:
            - mountPath: /bin/preload_headless.sh
              name: {{ $.Release.Name }}-snapshot-script-partition
              readOnly: true
              subPath: preload_headless.sh
            - mountPath: /data
              name: dp-user-migrator-volume
          dnsPolicy: ClusterFirst
          initContainers:
          - args:
            - $(APP_PROTOCOL_VERSION_KEY)
            - $(SLACK_WEBHOOK_URL)
            command:
            - /bin/preload_headless.sh
            env:
            - name: APP_PROTOCOL_VERSION_KEY
              value: {{ $.Values.global.appProtocolVersion }}
            - name: SLACK_WEBHOOK_URL
              valueFrom:
                secretKeyRef:
                  key: slack-webhook-url
                  name: slack
            {{- if and $.Values.remoteHeadless.image.repository $.Values.remoteHeadless.image.tag }}
            image: {{ $.Values.remoteHeadless.image.repository }}:{{ $.Values.remoteHeadless.image.tag }}
            {{- else }}
            image: {{ $.Values.global.image.repository }}:{{ $.Values.global.image.tag }}
            {{- end }}
            imagePullPolicy: Always
            name: preload-headless1
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            {{- with $.Values.dataProviderDataMigrator.resources }}
            resources:
              {{- toYaml . | nindent 14 }}
            {{- end }}
            volumeMounts:
            - mountPath: /bin/preload_headless.sh
              name: {{ $.Release.Name }}-snapshot-script-partition
              readOnly: true
              subPath: preload_headless.sh
            - mountPath: /data
              name: dp-user-migrator-volume
          - name: set-date
            image: debian:latest
            command:
              - sh
              - -c
              - >
                apt-get update && apt-get install -y coreutils &&
                echo -n $(date -d 'yesterday' +%Y-%m-%d) > /etc/config/date &&
                echo "Date set to: $(cat /etc/config/date)"
            volumeMounts:
              - name: date-config
                mountPath: /etc/config
          - name: chain-migration
            image: {{ $.Values.dataProvider.image.repository }}:{{ $.Values.dataProvider.image.tag }}
            command:
              - sh
              - '-c'
              - >
                dotnet NineChronicles.DataProvider.Executable.dll
                mysql-migration -o "/data/headless" --mysql-server $(DP_HOST)
                --mysql-port $(DP_PORT) --mysql-username $(DP_USER)
                --mysql-password $(DP_TOKEN) --mysql-database $(DP_DATABASE)
                --date "$(cat /etc/config/date)"
            env:
              - name: DP_HOST
                valueFrom:
                  secretKeyRef:
                    name: data-provider
                    key: write-host
              - name: DP_USER
                valueFrom:
                  secretKeyRef:
                    name: data-provider
                    key: user
              - name: DP_TOKEN
                valueFrom:
                  secretKeyRef:
                    name: data-provider
                    key: token
              - name: DP_PORT
                valueFrom:
                  secretKeyRef:
                    name: data-provider
                    key: port
              - name: DP_DATABASE
                valueFrom:
                  secretKeyRef:
                    name: data-provider
                    key: database
            resources:
              requests:
                cpu: '1'
                memory: 10Gi
            volumeMounts:
              - name: date-config
                mountPath: /etc/config
              - mountPath: /data
                name: dp-user-migrator-volume
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            imagePullPolicy: Always
          - command:
            - sh
            - -c
            - >
              dotnet NineChronicles.DataProvider.Executable.dll daily-metric-migration
              --mysql-server $(DP_HOST)
              --mysql-port $(DP_PORT)
              --mysql-username $(DP_USER)
              --mysql-password $(DP_TOKEN)
              --mysql-database $(DP_DATABASE)
              --date "$(cat /etc/config/date)"
            env:
            - name: DP_HOST
              valueFrom:
                secretKeyRef:
                  key: write-host
                  name: data-provider
            - name: DP_USER
              valueFrom:
                secretKeyRef:
                  key: user
                  name: data-provider
            - name: DP_TOKEN
              valueFrom:
                secretKeyRef:
                  key: token
                  name: data-provider
            - name: DP_PORT
              valueFrom:
                secretKeyRef:
                  key: port
                  name: data-provider
            - name: DP_DATABASE
              valueFrom:
                secretKeyRef:
                  key: database
                  name: data-provider
            image: {{ $.Values.dataProvider.image.repository }}:{{ $.Values.dataProvider.image.tag }}
            imagePullPolicy: Always
            name: dailymetric
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            {{- with $.Values.dataProviderDataMigrator.resources }}
            resources:
              {{- toYaml . | nindent 14 }}
            {{- end }}
            volumeMounts:
              - name: date-config
                mountPath: /etc/config
          - args:
            - NineChronicles.DataProvider.Executable.dll
            - user-data-migration
            - -o
            - /data/headless
            - --rocksdb-storetype
            - new
            - --mysql-server
            - $(DP_HOST)
            - --mysql-port
            - $(DP_PORT)
            - --mysql-username
            - $(DP_USER)
            - --mysql-password
            - $(DP_TOKEN)
            - --mysql-database
            - $(DP_DATABASE)
            - --slack-token
            - $(DP_SLACK_TOKEN)
            - --slack-channel
            - $(DP_SLACK_CHANNEL)
            - --network
            - $(DP_NETWORK)
            - --bulk-files-folder
            - /data
            command:
            - dotnet
            env:
            - name: DP_HOST
              valueFrom:
                secretKeyRef:
                  key: write-host
                  name: data-provider
            - name: DP_USER
              valueFrom:
                secretKeyRef:
                  key: user
                  name: data-provider
            - name: DP_TOKEN
              valueFrom:
                secretKeyRef:
                  key: token
                  name: data-provider
            - name: DP_PORT
              valueFrom:
                secretKeyRef:
                  key: port
                  name: data-provider
            - name: DP_DATABASE
              valueFrom:
                secretKeyRef:
                  key: database
                  name: data-provider
            - name: DP_SLACK_TOKEN
              valueFrom:
                secretKeyRef:
                  key: slack-token
                  name: data-provider
            - name: DP_SLACK_CHANNEL
              valueFrom:
                secretKeyRef:
                  key: slack-channel
                  name: data-provider
            - name: DP_NETWORK
              valueFrom:
                secretKeyRef:
                  key: network
                  name: data-provider
            image: {{ $.Values.dataProvider.image.repository }}:{{ $.Values.dataProvider.image.tag }}
            imagePullPolicy: Always
            name: migration
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            {{- with $.Values.dataProviderDataMigrator.resources }}
            resources:
              {{- toYaml . | nindent 14 }}
            {{- end }}
            volumeMounts:
            - mountPath: /data
              name: dp-user-migrator-volume
          {{- with $.Values.dataProviderDataMigrator.nodeSelector }}
          nodeSelector:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with $.Values.dataProviderDataMigrator.tolerations }}
          tolerations:
            {{- toYaml $.Values.dataProviderDataMigrator.tolerations | nindent 12 }}
          {{- end }}
          restartPolicy: OnFailure
          schedulerName: default-scheduler
          terminationGracePeriodSeconds: 30
          volumes:
          - configMap:
              defaultMode: 448
              name: {{ $.Release.Name }}-snapshot-script-partition
            name: {{ $.Release.Name }}-snapshot-script-partition
          - configMap:
              defaultMode: 448
              name: reset-snapshot-script
            name: reset-snapshot-script
          - name: dp-user-migrator-volume
            persistentVolumeClaim:
              claimName: dp-user-migrator-volume
          - name: date-config
            emptyDir: {}
  schedule: 0 0 * * *
  successfulJobsHistoryLimit: 1

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: dp-user-migrator-volume
  namespace: {{ $.Release.Name }}
  labels:
    app.kubernetes.io/instance: {{ $.Release.Name }}
  annotations:
    volume.beta.kubernetes.io/storage-provisioner: ebs.csi.aws.com
    volume.kubernetes.io/storage-provisioner: ebs.csi.aws.com
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ $.Values.dataProviderDataMigrator.storage }}
  storageClassName: {{ $.Release.Name }}-gp3
  volumeMode: Filesystem

{{ end }}
