{{- range $idx := until (int .Values.remoteHeadless.count) }}
{{- $index := add $idx 1 }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: remote-headless-{{ $index }}
    app.kubernetes.io/instance: {{ $.Release.Name }}
  name: remote-headless-{{ $index }}
  namespace: {{ $.Release.Name }}
spec:
  podManagementPolicy: OrderedReady
  {{- if $.Values.remoteHeadless.replicas }}
  replicas: {{ $.Values.remoteHeadless.replicas }}
  {{- else }}
  replicas: 1
  {{- end }}
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: remote-headless-{{ $index }}
  serviceName: remote-headless-{{ $index }}
  template:
    metadata:
      labels:
        app: remote-headless-{{ $index }}
      annotations:
        prometheus.io/port: '80'
        prometheus.io/scrape: 'true'
        {{- if $.Values.remoteHeadless.datadog.enabled }}
        ad.datadoghq.com/remote-headless-{{ $index }}.logs: |-
          [
            {
            "source": "container",
            "service": "remote-headless-{{ $index }}",
            "log_processing_rules": [
              {
                "type": "include_at_match",
                "name": "BlockEvaluationDuration",
                "pattern" : "pre-evaluation hash"
              },
              {
                "type": "exclude_at_match",
                "name": "excludeException",
                "pattern" : "Exception"
              },
              {
                "type": "exclude_at_match",
                "name": "excludeExceptionUndercase",
                "pattern" : "exception"
              },
              {
                "type": "exclude_at_match",
                "name": "excludeEvaluating",
                "pattern" : "Evaluating"
              }
            ]
          }]
        {{- end }}
      name: remote-headless-{{ $index }}
    spec:
      initContainers:
        {{- if $.Values.global.resetSnapshot }}
        - args:
          - 'https://snapshots.nine-chronicles.com/{{ $.Values.snapshot.path }}'  
          - /data/headless
          - $(RESET_SNAPSHOT_OPTION)
          - remote-headless-{{ $index }}
          - $(SLACK_WEBHOOK_URL)
          - $(SNAPSHOT_ROLLBACK_OPTION)
          command:
          - /bin/download_snapshot.sh
          env:
          - name: RESET_SNAPSHOT_OPTION  
            value: "{{ $.Values.global.resetSnapshot }}"
          - name: SNAPSHOT_ROLLBACK_OPTION
            value: "{{ $.Values.global.rollbackSnapshot }}"
          - name: SLACK_WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                key: slack-webhook-url
                name: slack
          {{- if and $.Values.remoteHeadless.image.repository $.Values.remoteHeadless.image.tag }}
          image: {{ $.Values.remoteHeadless.image.repository }}:{{ $.Values.remoteHeadless.image.tag }}
          {{- else }}
          image: {{ $.Values.global.image.repository }}:{{ $.Values.global.image.tag }}
          {{- end }}
          imagePullPolicy: Always
          name: reset-snapshot
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /bin/download_snapshot.sh
            name: download-snapshot-script
            readOnly: true
            subPath: download_snapshot.sh
          - mountPath: /data
            name: remote-headless-data-{{ $index }}
        {{- end }}
        {{- if $.Values.remoteHeadless.datadog.enabled }}
        - command:
          - sh
          - '-c'
          - >
            apk --no-cache add curl tar

            mkdir /data/datadog

            curl -s -L
            https://github.com/DataDog/dd-trace-dotnet/releases/download/v2.57.0/datadog-dotnet-apm-2.57.0.arm64.tar.gz
            | tar xvz -C /data/datadog

            sh /data/datadog/createLogPath.sh
          image: alpine
          imagePullPolicy: Always
          name: setup-datadog
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /data
            name: remote-headless-data-{{ $index }}
        {{- end }}
        - command:
          - sh
          - '-c'
          - >
            apk --no-cache add curl

            # Endpoint to check

            SEED="http://{{ regexFind "^[^,]+" (toString (index $.Values.seed.hosts 0)) }}:{{ $.Values.seed.ports.graphql }}/playground.html"

            echo Checking: ${SEED}

            while [[ $(curl --silent --output /dev/null --request GET
            --write-out "%{http_code}" ${SEED}) -ne 200 ]]; do
              echo "Not ready"
              sleep 5s
            done

            VALIDATOR="{{ $.Values.global.validatorPath }}/ui/playground"

            echo Checking: ${VALIDATOR}

            while [[ $(curl --silent --output /dev/null --request GET
            --write-out "%{http_code}" ${VALIDATOR}) -ne 200 ]]; do
              echo "Not ready"
              sleep 5s
            done

            echo Ready
          image: alpine
          imagePullPolicy: Always
          name: wait
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
      containers:
      - args:
        - NineChronicles.Headless.Executable.dll
        - run
        - --app-protocol-version={{ $.Values.global.appProtocolVersion }}
        - --trusted-app-protocol-version-signer={{ $.Values.global.trustedAppProtocolVersionSigner }}
        - --genesis-block-path={{ $.Values.global.genesisBlockPath }}
        - --port={{ $.Values.remoteHeadless.ports.headless }}
        - --no-miner
        - --store-type=rocksdb
        - --store-path=/data/headless
        {{- if $.Values.remoteHeadless.useTurnServer }}
        {{- range $.Values.iceServers }}
        - --ice-server={{ . }}
        {{- end }}
        {{- else }}
        - --host={{ regexFind "^[^,]+" (toString (index $.Values.remoteHeadless.hosts $idx)) }}
        {{- end }}
        {{- range $.Values.global.peerStrings }}
        - --peer={{ . }}
        {{- end }}
        - --graphql-server
        - --graphql-host=0.0.0.0
        - --graphql-port={{ $.Values.remoteHeadless.ports.graphql }}
        - --rpc-server
        - --rpc-remote-server
        - --rpc-listen-host=0.0.0.0
        - --rpc-listen-port={{ $.Values.remoteHeadless.ports.rpc }}
        - --no-cors
        - --chain-tip-stale-behavior-type=reboot
        - --tx-life-time=10
        - --planet={{ $.Values.global.planet }}
        {{- if $.Values.global.headlessAppsettingsPath }}
        - --config={{ $.Values.global.headlessAppsettingsPath }}
        {{- end }}
        {{- with $.Values.remoteHeadless.extraArgs }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
        command:
        - dotnet
        {{- if and $.Values.remoteHeadless.image.repository $.Values.remoteHeadless.image.tag }}
        image: {{ $.Values.remoteHeadless.image.repository }}:{{ $.Values.remoteHeadless.image.tag }}
        {{- else }}
        image: {{ $.Values.global.image.repository }}:{{ $.Values.global.image.tag }}
        {{- end }}
        imagePullPolicy: Always
        name: remote-headless-{{ $index }}
        ports:
        - containerPort: {{ $.Values.remoteHeadless.ports.graphql }}
          name: graphql
          protocol: TCP
        - containerPort: {{ $.Values.remoteHeadless.ports.headless }}
          name: headless
          protocol: TCP
        - containerPort: {{ $.Values.remoteHeadless.ports.rpc }}
          name: rpc
          protocol: TCP
        livenessProbe:
          exec:
            command:
            {{- if eq $.Values.global.networkType "Main"  }}
            - /bin/liveness_probe.sh
            {{- else }}
            - /bin/liveness_probe.sh
            {{- end }}
          failureThreshold: 5
          initialDelaySeconds: 1800
          periodSeconds: 60
          timeoutSeconds: 60
        readinessProbe:
          exec:
            command:
            - /bin/readiness_probe.sh
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 10
        resources:
          {{- toYaml $.Values.remoteHeadless.resources | nindent 10 }}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /data
          name: remote-headless-data-{{ $index }}
        - mountPath: /bin/liveness_probe.sh
          name: probe-script
          readOnly: true
          subPath: liveness_probe.sh
        - mountPath: /bin/readiness_probe.sh
          name: probe-script
          readOnly: true
          subPath: readiness_probe.sh
        {{- if $.Values.remoteHeadless.loggingEnabled }}
        - mountPath: /app/logs
          name: json-log
        {{- end }}
        - mountPath: /app/appsettings.configmap.json
          name: appsettings
          subPath: appsettings.json
        env:
          {{- if $.Values.remoteHeadless.loggingEnabled }}
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: NAMESPACE_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: JSON_LOG_PATH
            value: ./logs/$(POD_NAME)_$(NAMESPACE_NAME)_remote-headless-{{ $index }}.json
          {{- end }}
          {{- if $.Values.remoteHeadless.datadog.enabled }}
          - name: OTLP_ENDPOINT
            value: 'http://datadog.datadog.svc.cluster.local:4317'
          - name: DD_ENV
            value: production
          - name: DD_DOTNET_TRACER_HOME
            value: /data/datadog
          - name: DD_AGENT_HOST
            value: datadog.datadog.svc.cluster.local
          - name: DD_RUNTIME_METRICS_ENABLED
            value: 'true'
          - name: DD_DYNAMIC_INSTRUMENTATION_ENABLED
            value: 'true'
          - name: CORECLR_ENABLE_PROFILING
            value: '1'
          - name: CORECLR_PROFILER
            value: '{846F5F1C-F9AE-4B07-969E-05C26BC060D8}'
          - name: CORECLR_PROFILER_PATH
            value: /data/datadog/Datadog.Trace.ClrProfiler.Native.so
          - name: ASPNETCORE_ENVIRONMENT
            value: 'production'
          {{- end }}
        {{- with $.Values.remoteHeadless.env }}
          {{- toYaml . | nindent 10 }}
        {{- end }}
      {{- with $.Values.remoteHeadless.nodeSelector }}
      nodeSelector:
      {{- if kindIs "slice" . }}
        {{- toYaml (index . $idx) | nindent 8 }}
      {{- else }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- end }}
      {{- with $.Values.remoteHeadless.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          defaultMode: 448
          name: {{ $.Release.Name }}-probe-script
        name: probe-script
      - name: download-snapshot-script
        configMap:
          defaultMode: 0700
          name: {{ $.Release.Name }}-download-snapshot-script
      {{- if $.Values.remoteHeadless.loggingEnabled }}
      - hostPath:
          path: /var/log/headless
          type: DirectoryOrCreate
        name: json-log
      {{- end }}
      - name: appsettings
        configMap:
          defaultMode: 0700
          name: appsettings
      {{- if and $.Values.remoteHeadless.storage.volumeNames (gt (len $.Values.remoteHeadless.storage.volumeNames) $idx) (ne (index $.Values.remoteHeadless.storage.volumeNames $idx) "") }}
      - name: remote-headless-data-{{ $index }}
        persistentVolumeClaim:
          claimName: {{ index $.Values.remoteHeadless.storage.volumeNames $idx }}
      {{- else }}
  volumeClaimTemplates:
  - metadata:
      name: remote-headless-data-{{ $index }}
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: {{ $.Values.remoteHeadless.storage.data }}
      {{- if eq $.Values.provider "AWS" }}
      storageClassName: {{ $.Release.Name }}-gp3
      {{- else if eq $.Values.provider "RKE2" }}
      storageClassName: {{ $.Release.Name }}-longhorn
      {{- end }}
      volumeMode: Filesystem
      {{- end }}
  updateStrategy:
    type: RollingUpdate
---
{{- if $.Values.remoteHeadless.ingress.enabled }}
{{- $hosts := split "," (index ($.Values.remoteHeadless.ingress.hosts | default $.Values.remoteHeadless.hosts) $idx) }}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: remote-headless-{{ $index }}-ingress
  namespace: {{ $.Release.Name }}
  annotations:
    traefik.ingress.kubernetes.io/affinity: "true"
spec:
  rules:
    {{- range $host := $hosts }}
    - host: {{ $host }}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: remote-headless-{{ $index }}
                port:
                  number: 80
    {{- end }}
---
{{- end }}
{{- end }}
