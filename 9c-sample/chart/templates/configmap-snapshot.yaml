apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Chart.Name }}-snapshot-script
  namespace: {{ $.Chart.Name }}
data:
  download_snapshot.sh: |-
    #!/usr/bin/env bash
    cd /data

    apk update
    apk add curl jq wget sudo zip

    base_url=${1:-https://snapshots.nine-chronicles.com/internal}
    save_dir=${2:-"9c-main-snapshot_$(date +%Y%m%d_%H)"}
    download_option=$3
    service_name=$4
    slack_token=$5

    if [ $download_option = y ]
    then
      echo "Start download snapshot"
      if [ $service_name != "snapshot" ]
      then
        curl --data "[K8S] Start snapshot download in $service_name. Please wait." "https://planetariumhq.slack.com/services/hooks/slackbot?token=$slack_token&channel=%23bot-test"
      fi
      # strip tailing slash
      base_url=${base_url%/}

      function get_snapshot_value() {
          snapshot_json_url="$1"
          snapshot_param="$2"

          snapshot_param_return_value=$(curl --silent "$snapshot_json_url" | jq ".$snapshot_param")
          echo "$snapshot_param_return_value"
      }

      function download_unzip_partial_snapshot() {
        snapshot_json_filename="latest.json"
        mainnet_snapshot_json_filename="mainnet_latest.json"
        snapshot_zip_filename="state_latest.zip"
        snapshot_zip_filename_array=("$snapshot_zip_filename")

        while :
        do
            snapshot_json_url="$base_url/$snapshot_json_filename"

            BlockEpoch=$(get_snapshot_value "$snapshot_json_url" "BlockEpoch")
            TxEpoch=$(get_snapshot_value "$snapshot_json_url" "TxEpoch")
            PreviousBlockEpoch=$(get_snapshot_value "$snapshot_json_url" "PreviousBlockEpoch")
            PreviousTxEpoch=$(get_snapshot_value "$snapshot_json_url" "PreviousTxEpoch")

            snapshot_zip_filename="snapshot-$BlockEpoch-$TxEpoch.zip"
            snapshot_zip_filename_array+=("$snapshot_zip_filename")

            if [ "$PreviousBlockEpoch" -lt $1 ]
            then
                break
            fi

            snapshot_json_filename="snapshot-$PreviousBlockEpoch-$PreviousTxEpoch.json"
        done

        if [[ ! -d "$save_dir" ]]
        then
            echo "[Info] The directory $save_dir does not exist and is created."
            mkdir -p "$save_dir"
        fi

        for ((i=${#snapshot_zip_filename_array[@]}-1; i>=0; i--))
        do
            snapshot_zip_filename="${snapshot_zip_filename_array[$i]}"
            rm "$snapshot_zip_filename" 2>/dev/null

            snapshot_zip_url="$base_url/$snapshot_zip_filename"
            echo "$snapshot_zip_url"

            wget -q "$snapshot_zip_url"
            echo "Unzipping $snapshot_zip_filename"
            unzip -o "$snapshot_zip_filename" -d "$save_dir"
            rm "$snapshot_zip_filename"
        done

        wget -q "$base_url/$mainnet_snapshot_json_filename" -O "$save_dir/$mainnet_snapshot_json_filename"
      }

      function download_unzip_full_snapshot() {
          snapshot_json_filename="latest.json"
          mainnet_snapshot_json_filename="mainnet_latest.json"
          snapshot_zip_filename="state_latest.zip"
          snapshot_zip_filename_array=("$snapshot_zip_filename")

          while :
          do
              snapshot_json_url="$base_url/$snapshot_json_filename"
              echo "$snapshot_json_url"

              BlockEpoch=$(get_snapshot_value "$snapshot_json_url" "BlockEpoch")
              TxEpoch=$(get_snapshot_value "$snapshot_json_url" "TxEpoch")
              PreviousBlockEpoch=$(get_snapshot_value "$snapshot_json_url" "PreviousBlockEpoch")
              PreviousTxEpoch=$(get_snapshot_value "$snapshot_json_url" "PreviousTxEpoch")

              snapshot_zip_filename="snapshot-$BlockEpoch-$TxEpoch.zip"
              snapshot_zip_filename_array+=("$snapshot_zip_filename")

              if [ "$PreviousBlockEpoch" -eq 0 ]
              then
                  break
              fi

              snapshot_json_filename="snapshot-$PreviousBlockEpoch-$PreviousTxEpoch.json"
          done

          if [[ ! -d "$save_dir" ]]
          then
              echo "[Info] The directory $save_dir does not exist and is created."
              mkdir -p "$save_dir"
          fi

          for ((i=${#snapshot_zip_filename_array[@]}-1; i>=0; i--))
          do
              snapshot_zip_filename="${snapshot_zip_filename_array[$i]}"
              rm "$snapshot_zip_filename" 2>/dev/null

              snapshot_zip_url="$base_url/$snapshot_zip_filename"
              echo "$snapshot_zip_url"

              wget -q "$snapshot_zip_url"
              echo "Unzipping $snapshot_zip_filename"
              unzip -o "$snapshot_zip_filename" -d "$save_dir"
              rm "$snapshot_zip_filename"
          done

          wget -q "$base_url/$mainnet_snapshot_json_filename" -O "$save_dir/$mainnet_snapshot_json_filename"
      }

      if [ -f $save_dir/mainnet_latest.json ]
      then
        local_previous_mainnet_blockEpoch=$(cat "$save_dir/mainnet_latest.json" | jq ".BlockEpoch")
        download_unzip_partial_snapshot $local_previous_mainnet_blockEpoch
      else
        download_unzip_full_snapshot
      fi

      # The return value for the program that calls this script
      echo "$save_dir"
      if [ $service_name != "snapshot" ]
      then
        curl --data "[K8S] Snapshot download complete in $service_name. Pod Starting." "https://planetariumhq.slack.com/services/hooks/slackbot?token=$slack_token&channel=%23bot-test"
      fi
    else
      echo "Skip download snapshot"
      if [ $service_name != "snapshot" ]
      then
        curl --data "[K8S] Skip snapshot download in $service_name. Pod Starting." "https://planetariumhq.slack.com/services/hooks/slackbot?token=$slack_token&channel=%23bot-test"
      fi
    fi
  preload_headless.sh: |-
    #!/usr/bin/env bash
    set -ex

    apt-get -y update
    apt-get -y install zip
    apt-get -y install curl
    HOME="/app"

    APP_PROTOCOL_VERSION=$1
    slack_token=$2
    VERSION_NUMBER="${APP_PROTOCOL_VERSION:0:4}"
    GENESIS_BLOCK_PATH="https://release.nine-chronicles.com/genesis-block-9c-main"
    STORE_PATH="/data/headless"
    TRUSTED_APP_PROTOCOL_VERSION_SIGNER="02529a61b9002ba8f21c858224234af971e962cac9bd7e6b365e71e125c6463478"
    SEED1="027bd36895d68681290e570692ad3736750ceaab37be402442ffb203967f98f7b6,bot-test-tcp.planetarium.dev,31236"
    ICE_SERVER="turn://0ed3e48007413e7c2e638f13ddd75ad272c6c507e081bd76a75e4b7adc86c9af:0apejou+ycZFfwtREeXFKdfLj2gCclKzz5ZJ49Cmy6I=@turn-us.planetarium.dev:3478"

    HEADLESS="$HOME/NineChronicles.Headless.Executable"
    HEADLESS_LOG_NAME="headless_$(date -u +"%Y%m%d%H%M").log"
    HEADLESS_LOG_DIR="/data/snapshot_logs"
    HEADLESS_LOG="$HEADLESS_LOG_DIR/$HEADLESS_LOG_NAME"
    mkdir -p "$HEADLESS_LOG_DIR"

    PID_FILE="$HOME/headless_pid"
    function senderr() {
      echo "$1"
      curl --data "[K8S] $1. Check snapshot-v$VERSION_NUMBER in bot-test cluster at preload_headless.sh." "https://planetariumhq.slack.com/services/hooks/slackbot?token=$slack_token&channel=%23bot-test"
    }

    function preload_complete() {
      echo "$1"
    }

    function waitpid() {
      PID="$1"
      while [ -e "/proc/$PID" ]; do
        sleep 1
      done
    }

    function run_headless() {
      chmod 777 -R "$STORE_PATH"

      "$HEADLESS" \
          --workers=50 \
          --no-miner \
          --genesis-block-path="$GENESIS_BLOCK_PATH" \
          --store-type=rocksdb \
          --store-path="$STORE_PATH" \
          --app-protocol-version="$APP_PROTOCOL_VERSION" \
          --trusted-app-protocol-version-signer="$TRUSTED_APP_PROTOCOL_VERSION_SIGNER" \
          --ice-server="$ICE_SERVER" \
          --peer "$SEED1" \
          --network-type=Internal \
          > "$HEADLESS_LOG" 2>&1 &

      PID="$!"

      echo "$PID" | tee "$PID_FILE"

      if ! kill -0 "$PID"; then
        senderr "$PID doesn't exist. Failed to run headless" $1
        exit 1
      fi
    }

    function wait_preloading() {
      touch "$PID_FILE"
      PID="$(cat "$PID_FILE")"

      if ! kill -0 "$PID"; then
        senderr "$PID doesn't exist. Failed to run headless" $1
        exit 1
      fi

      if timeout 1800 tail -f "$HEADLESS_LOG" | grep -m1 "CompleteBlocksAsync finished;"; then
        sleep 30
      else
        senderr "grep failed. Failed to preload." $1
        kill "$PID"
        exit 1
      fi
    }

    function kill_headless() {
      touch "$PID_FILE"
      PID="$(cat "$PID_FILE")"
      if ! kill -0 "$PID"; then
        echo "$PID doesn't exist. Failed to kill headless"
      else
        kill -KILL "$PID"
        waitpid "$PID" || true
        chmod 777 -R "$STORE_PATH"
      fi
    }

    function rotate_log() {
      cd "$HEADLESS_LOG_DIR"
      if ./*"$(date -d 'yesterday' -u +'%Y%m%d')"*.log; then
        zip "$(date -d 'yesterday' -u +'%Y%m%d')".zip ./*"$(date -d 'yesterday' -u +'%Y%m%d')"*.log
        rm ./*"$(date -d 'yesterday' -u +'%Y%m%d')"*.log
      fi
    }
    trap '' HUP

    run_headless
    wait_preloading
    preload_complete "Preloading completed"
    kill_headless
    rotate_log
